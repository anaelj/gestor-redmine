[{"C:\\Users\\densenv04\\reactapps\\gestor-redmine\\src\\App.tsx":"1","C:\\Users\\densenv04\\reactapps\\gestor-redmine\\src\\services\\api.tsx":"2","C:\\Users\\densenv04\\reactapps\\gestor-redmine\\src\\index.tsx":"3"},{"size":10276,"mtime":1613564196834,"results":"4","hashOfConfig":"5"},{"size":144,"mtime":1612013221782,"results":"6","hashOfConfig":"5"},{"size":205,"mtime":1612013221779,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"kf8yyp",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\densenv04\\reactapps\\gestor-redmine\\src\\App.tsx",["15","16","17","18","19","20","21","22"],"import React, { useEffect, useState } from 'react';\r\nimport { XAxis, Tooltip, CartesianGrid, BarChart, YAxis, Legend, Bar} from 'recharts';\r\nimport api from './services/api';\r\n\r\n\r\ninterface IDataChart {\r\n  descricao: string | number;\r\n  quantidade: number;\r\n\r\n}\r\ninterface IDataChartBugImplementacao {\r\n  mes: string ;\r\n  qtImplementacao?: number;\r\n  qtBug?: number;\r\n  qtDuvida?: number;\r\n}\r\n\r\ninterface IDataChartBugOrigem {\r\n  mes: string ;\r\n  qtInterno?: number;\r\n  qtCliente?: number;\r\n}\r\n\r\ninterface IDataChartModulo {\r\n  descricao: string ;\r\n  mes: string ;\r\n  qtIssues?: number;\r\n}\r\n\r\ninterface ICustomFields {\r\n    id: number;\r\n    name: string;\r\n    value: string;    \r\n}\r\n\r\ninterface ItemGroup<T> {\r\n  [key: string]: T[];\r\n}\r\ninterface Item<T = any> {\r\n  [key: string]: T\r\n}\r\n\r\ninterface Iissues {\r\n  \r\n  id : number;\r\n  created_on: string;\r\n  \r\n  author : {\r\n    name: string;\r\n  }\r\n\r\n  tracker: {\r\n    id: number;\r\n    name: string;\r\n  }\r\n\r\n  project: {\r\n    id: number;\r\n    name: string;\r\n  }\r\n  subject: {\r\n    id: number;\r\n    name: string;\r\n  }\r\n\r\n  origemAtendimento : string| undefined;\r\n  \r\n  modulo : string| undefined;\r\n\r\n  custom_fields: ICustomFields[];\r\n\r\n  tracker_name : string;\r\n  monthAndYear: string;\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n   const [issues, setIssues] = useState<Iissues[]>([]);\r\n   const [dataChart, setDataChart] = useState<IDataChart[]>([]);\r\n   const [dataChartBugImp, setDataChartBugImp] = useState<IDataChartBugImplementacao[]>([]);\r\n   const [dataChartBugOrigem, setDataChartBugOrigem] = useState<IDataChartBugOrigem[]>([]);\r\n   const [dataChartModulo, setDataChartModulo] = useState<IDataChartModulo[]>([]);\r\n\r\n  async function loadData (skip : number, itens : Iissues[] ): Promise<void> {\r\n    const response = await api.get(`issues.json?created_on=%3E%3C2020-01-01|2021-02-01&status_id=*&limit=6000&offset=${skip}&key=1927788238b0418601fd837aeabcdd9437042b4c&sort=created_on`);        //&created_on=%3E%3C2020-01-01|2020-12-30\r\n    const newArray : Iissues[] = response.data.issues;\r\n\r\n     setIssues([...itens, ...newArray]);\r\n     \r\n    // if (newArray.length === 100){\r\n    //   loadData(skip+100,newArray) ;\r\n    // }\r\n\r\n  }\r\n\r\n   useEffect (  () => {\r\n\r\n    function getCustomFieldValue (name: string, custonfields: ICustomFields[]) {\r\n      return custonfields.find( item => {return item.name === name ? item.value : ''} )\r\n    }\r\n\r\n    const newArray : Iissues[] = [];\r\n\r\n    issues.map(item => { \r\n      \r\n      const newItem : Iissues = { ...item, \r\n        tracker_name : item.tracker.name,\r\n        monthAndYear: new Date(item.created_on).getMonth()+1 +'/'+new Date(item.created_on).getFullYear(),\r\n        origemAtendimento: getCustomFieldValue('Origem',item.custom_fields)?.value, \r\n        modulo: getCustomFieldValue('Módulo',item.custom_fields)?.value \r\n       };\r\n\r\n        newArray.push(newItem);\r\n         \r\n    });\r\n\r\n    console.log(newArray);\r\n\r\n     const implementacao = 'Implementação';\r\n     const correcaoBug = 'Correção de Bug';\r\n     const duvidaUsuario = 'Dúvida de Usuário';\r\n\r\n     function groupBy<T extends Item>(array: T[], key: keyof T): ItemGroup<T> {\r\n      return array.reduce<ItemGroup<T>>((map, item) => {\r\n        const itemKey = item[key]\r\n        if(map[itemKey]) {\r\n          map[itemKey].push(item);\r\n        } else {\r\n          map[itemKey] = [item]\r\n        }\r\n   \r\n        return map\r\n      }, {})\r\n    }\r\n\r\n     const arrayDataMonth : IDataChart[] = [];\r\n     const arrayDataMonthImpBug : IDataChartBugImplementacao[] = [];\r\n     const arrayDataBugInternoCliente : IDataChartBugOrigem[] = [];\r\n     const arrayDataModulo : IDataChartModulo[] = [];\r\n\r\n//    console.log(newArray);\r\n\r\n     const groupMonth = groupBy(newArray, \"monthAndYear\" );\r\n\r\n     const keys = Object.keys( groupMonth );\r\n\r\n     keys.map(itemKey => {\r\n       arrayDataMonth.push({descricao: itemKey , quantidade: groupMonth[itemKey].length }); \r\n       \r\n       const groupTracker = groupBy(groupMonth[itemKey], \"tracker_name\" );\r\n       const agrupamentoPorTipoDeAtemdimento = Object.keys( groupTracker );\r\n\r\n       agrupamentoPorTipoDeAtemdimento.map(itemTipoAtendimento => { \r\n\r\n        if (itemTipoAtendimento === implementacao){\r\n          updateOrInsertIntoArray( arrayDataMonthImpBug, {mes: itemKey+'-'+itemTipoAtendimento, qtImplementacao: groupTracker[itemTipoAtendimento].length }); \r\n        } else if (itemTipoAtendimento === correcaoBug){\r\n          updateOrInsertIntoArray( arrayDataMonthImpBug, {mes: itemKey+'-'+itemTipoAtendimento , qtBug: groupTracker[itemTipoAtendimento].length }); \r\n        } else if (itemTipoAtendimento === duvidaUsuario){\r\n          updateOrInsertIntoArray( arrayDataMonthImpBug, {mes: itemKey+'-'+itemTipoAtendimento , qtDuvida: groupTracker[itemTipoAtendimento].length }); \r\n        } \r\n       })\r\n\r\n       const groupModulo = groupBy(groupMonth[itemKey], \"tracker_name\" );\r\n       const agrupamentoPorModulo = Object.keys( groupModulo );\r\n\r\n      //  agrupamentoPorModulo.map(itemModulo => { \r\n\r\n      //     setDataChartModulo([...dataChartModulo, {mes: itemKey+'-'+itemModulo, qtIssues: groupTracker[itemModulo].length }])  \r\n\r\n      //  })\r\n\r\n\r\n      const groupOrigemAtendimento = groupBy(groupMonth[itemKey], \"origemAtendimento\" );\r\n      const agrupamentoOrigemAtendimento = Object.keys( groupOrigemAtendimento );\r\n      agrupamentoOrigemAtendimento.map(itemorigemAtendimento => { \r\n          if (itemorigemAtendimento === 'Cliente'){\r\n            updateOrInsertIntoArrayOrigemAtendimento( arrayDataBugInternoCliente, {mes: itemKey+'-'+itemorigemAtendimento, qtCliente: groupOrigemAtendimento[itemorigemAtendimento].length  }); \r\n          } else if (itemorigemAtendimento === 'Teste Interno'){\r\n            updateOrInsertIntoArrayOrigemAtendimento( arrayDataBugInternoCliente, {mes: itemKey+'-'+itemorigemAtendimento , qtInterno: groupOrigemAtendimento[itemorigemAtendimento].length }); \r\n          } \r\n        })\r\n      });\r\n\r\n     function updateOrInsertIntoArrayOrigemAtendimento(array : IDataChartBugOrigem[] , item : IDataChartBugOrigem) { // (1)\r\n      const i = array.findIndex(_item => _item.mes === item.mes);\r\n      if (i > -1) {\r\n        if (item.qtCliente) {\r\n          array[i] = {mes: item.mes, qtCliente: array[i].qtCliente, qtInterno: item.qtInterno};\r\n        } else if (item.qtInterno){\r\n          array[i] = {mes: item.mes, qtCliente: item.qtCliente, qtInterno: array[i].qtInterno};\r\n        } \r\n      } \r\n      else { \r\n        array.push(item);\r\n      }\r\n    }\r\n\r\n\r\n     function updateOrInsertIntoArray(array : IDataChartBugImplementacao[] , item : IDataChartBugImplementacao) { \r\n      const i = array.findIndex(_item => _item.mes === item.mes);\r\n      if (i > -1) {\r\n        if (item.qtBug) {\r\n          array[i] = {mes: item.mes, qtBug: array[i].qtBug, qtDuvida: array[i].qtDuvida, qtImplementacao: item.qtImplementacao};\r\n        } else if (item.qtImplementacao){\r\n          array[i] = {mes: item.mes, qtBug: item.qtBug, qtDuvida: array[i].qtDuvida, qtImplementacao: array[i].qtImplementacao};\r\n        } else if (item.qtDuvida){\r\n          array[i] = {mes: item.mes, qtBug: array[i].qtBug, qtDuvida: item.qtDuvida,  qtImplementacao: array[i].qtImplementacao};\r\n        }\r\n        \r\n      } \r\n      else { \r\n        array.push(item);\r\n      }\r\n    }\r\n\r\n    setDataChart(arrayDataMonth);\r\n    setDataChartBugImp(arrayDataMonthImpBug);\r\n    setDataChartBugOrigem(arrayDataBugInternoCliente);\r\n\r\n     //     console.log(arrayDataMonth);\r\n\r\n\r\n\r\n//     const groupTracker = groupBy(newArray, \"tracker_name\" );\r\n//     console.log(groupTracker);\r\n  //   if (groupTracker[impplementacao]){\r\n  //     const groupByMonth = groupBy(groupTracker[impplementacao],'month');\r\n  //       console.log(groupByMonth);\r\n  // }\r\n\r\n\r\n    // const implementationQuantity = issues.reduce(function (total, item) {\r\n    //   if (item.tracker.name === imp) {\r\n    //     total++;\r\n    //   }\r\n    //   else {\r\n    //     total;\r\n    //   }\r\n    //   return total;\r\n    // }, {});\r\n    \r\n//    console.log(implementationQuantity);\r\n\r\n//     issues.map( item => {\r\n\r\n// //      const day = new Date(item.created_on).getDay();\r\n//       const month = new Date(item.created_on).getMonth()+1;\r\n//       const year = new Date(item.created_on).getFullYear();\r\n\r\n\r\n//       const implementationQuantity = issues.reduce(\r\n//         (acumulador , valorAtual) =>  valorAtual.tracker.name === 'Implementação' ? acumulador++ : acumulador\r\n//         , 0\r\n//       );\r\n//       console.log(implementationQuantity);\r\n\r\n//       const bugQuantity = issues.reduce(\r\n//         (acumulador , valorAtual) =>  valorAtual.tracker.name === 'Correção de Bug' ? acumulador++ : acumulador\r\n//         , 0\r\n//       );\r\n//       console.log(bugQuantity);\r\n\r\n//      if (item.tracker.name === 'Implementação') {\r\n//       setImplementationIssues([ ...[{month, year, quantity: implementationQuantity , tracker: item.tracker.name}]]);\r\n\r\n//       } else if (item.tracker.name === 'Correção de Bug') {\r\n//         setBugIssues([ ...[{ month, year, quantity: bugQuantity, tracker: item.tracker.name}]]);\r\n//       }\r\n//     })\r\n\r\n\r\n },[issues]); \r\n\r\n  return (\r\n    <div>\r\n    <h2>\r\n      {' '}\r\n      <button onClick={() => loadData(0, [])}>Click me</button>\r\n    </h2>\r\n\r\n    <BarChart width={600} height={300} data={dataChart}>\r\n      <CartesianGrid strokeDasharray=\"3 3\" />\r\n      <XAxis dataKey=\"descricao\" />\r\n      <YAxis />\r\n      <Tooltip />\r\n      <Legend />\r\n      <Bar dataKey=\"quantidade\" fill=\"#8884d8\" />\r\n    </BarChart>\r\n\r\n    <BarChart width={600} height={300} data={dataChartBugImp}>\r\n      <CartesianGrid strokeDasharray=\"3 3\" />\r\n      <XAxis dataKey=\"mes\" />\r\n      <YAxis />\r\n      <Tooltip />\r\n      <Legend />\r\n      <Bar dataKey=\"qtImplementacao\" fill=\"#0b8d2d \" />\r\n      <Bar dataKey=\"qtBug\" fill=\"#e62200 \" />\r\n      <Bar dataKey=\"qtDuvida\" fill=\"#4750d1 \" />\r\n    </BarChart>\r\n    \r\n    <BarChart width={600} height={300} data={dataChartBugOrigem}>\r\n      <CartesianGrid strokeDasharray=\"3 3\" />\r\n      <XAxis dataKey=\"mes\" />\r\n      <YAxis />\r\n      <Tooltip />\r\n      <Legend />\r\n      <Bar dataKey=\"qtInterno\" fill=\"#0b8d2d \" />\r\n      <Bar dataKey=\"qtCliente\" fill=\"#e62200 \" />\r\n    </BarChart>\r\n  </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;","C:\\Users\\densenv04\\reactapps\\gestor-redmine\\src\\services\\api.tsx",[],"C:\\Users\\densenv04\\reactapps\\gestor-redmine\\src\\index.tsx",[],{"ruleId":"23","severity":1,"message":"24","line":83,"column":11,"nodeType":"25","messageId":"26","endLine":83,"endColumn":26},{"ruleId":"23","severity":1,"message":"27","line":83,"column":28,"nodeType":"25","messageId":"26","endLine":83,"endColumn":46},{"ruleId":"28","severity":1,"message":"29","line":105,"column":21,"nodeType":"30","messageId":"31","endLine":105,"endColumn":23},{"ruleId":"23","severity":1,"message":"32","line":140,"column":12,"nodeType":"25","messageId":"26","endLine":140,"endColumn":48},{"ruleId":"28","severity":1,"message":"29","line":148,"column":23,"nodeType":"30","messageId":"31","endLine":148,"endColumn":25},{"ruleId":"28","severity":1,"message":"29","line":154,"column":64,"nodeType":"30","messageId":"31","endLine":154,"endColumn":66},{"ruleId":"23","severity":1,"message":"33","line":166,"column":14,"nodeType":"25","messageId":"26","endLine":166,"endColumn":34},{"ruleId":"28","severity":1,"message":"29","line":177,"column":62,"nodeType":"30","messageId":"31","endLine":177,"endColumn":64},"@typescript-eslint/no-unused-vars","'dataChartModulo' is assigned a value but never used.","Identifier","unusedVar","'setDataChartModulo' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'arrayDataModulo' is assigned a value but never used.","'agrupamentoPorModulo' is assigned a value but never used."]